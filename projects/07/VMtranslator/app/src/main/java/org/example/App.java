/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.example.impl.*;

import java.nio.file.Path;
import java.io.File;
import java.util.stream.Collectors;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.IOException;
import java.io.FileWriter;
import java.io.BufferedWriter;

import java.util.List;
import java.util.stream.Stream;
import java.util.ArrayList;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        String baseDir = System.getProperty("user.dir");

        // list of Parsers for each .vm file
        List<Parser> parsers = new ArrayList<Parser>();

        if (args.length > 0 && args[0].endsWith(".vm")) {
            parsers.add(new Parser(new File(Path.of(baseDir, args[0]).toString())));
        } else {
            try (Stream<Path> walk = Files.walk(Paths.get(baseDir))) {
                List<String> vmFileNames = walk
                        .filter(p -> !Files.isDirectory(p))
                        .map(p -> p.toString())
                        .filter(f -> f.endsWith("vm"))
                        .collect(Collectors.toList());
                for (String vmFile : vmFileNames) {
                    parsers.add(new Parser(new File(Path.of(vmFile).toString())));
                }
            } catch (IOException ex) {
                System.out.println("Exc walking dir for *.vm");
            }
        }
        
        // one CodeWriter
        CodeWriter writer = new CodeWriter();
        String childDirName = baseDir.substring(System.getProperty("user.dir").lastIndexOf("\\") + 1, baseDir.length());
        // create output .asm file
        String outputFileName = args.length > 0 && args[0].endsWith(".vm") ?
                System.getProperty("user.dir") + "/" + args[0].split(".vm")[0] :
                baseDir + "/" + childDirName;

        try {
            writer.setFileName(outputFileName);

            for (Parser parser : parsers) {

                // try to open its file, and write to writer while there are more commands
                while (parser.hasMoreCommands()) {
                    try {
                        String cc = parser.getCurrentCommand();
                        switch (parser.commandType()) {
                            case C_PUSH:
                            case C_POP:
                                writer.writePushPop(parser.commandType(), parser.arg1(), parser.arg2());
                                break;
                            case C_ARITHMETIC:
                                writer.writeArithmetic(cc);
                                break;
                            default:
                                break;
                        }
                    } catch (IOException ex) {
                        System.err.println(ex);
                    }
                }
            }
            writer.close();
        } catch (IOException ex) {
            System.err.println(ex);
        } finally {
        }
    }
}
