/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.nio.file.Path;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import static org.example.util.MathHelpers.*;

import org.example.impl.*;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        String startingDir = "/home/daintrain/src/nand2tetris/projects/06/";
        String asmFileNameAndExt = args[0];
        String fileName = asmFileNameAndExt.split("\\.")[0];
        String hackFileNameAndExt = startingDir + fileName + ".hack";

        File asmFile = new File(Path.of(startingDir, asmFileNameAndExt).toString());

        //construct Parser with input file
        Parser parser = new Parser(asmFile);
        Code code = new Code();
        SymbolTable table = new SymbolTable();

        // create output .hack file
        BufferedWriter out = null;
        try {
            FileWriter fstream = new FileWriter(hackFileNameAndExt);

            int nextROMAddress = 0;
            while (parser.hasMoreCommands()) {
                switch (parser.commandType()) {
                    case L_COMMAND:
                        table.addEntry(parser.symbol(), nextROMAddress);
                        break;
                    case C_COMMAND:
                    case A_COMMAND:
                        nextROMAddress++;
                        break;
                    case COMMENT:
                    default:
                        break;
                }
            }
            // reset reader to beginning of file
            parser = new Parser(asmFile);

            out = new BufferedWriter(fstream);

             // while parser has more commands
             int nextRAMAddress = 16;
             while (parser.hasMoreCommands()) {
                CommandType currentCommandType = parser.commandType();
                switch (currentCommandType) {
                    case A_COMMAND:
                        // is @Xxx a nubmer or symbol?
                        String symbol = parser.symbol();
                        Integer result = 0;
                        if (Character.isDigit(symbol.charAt(0))) {
                            result = Integer.parseInt(symbol);
                        } else {
                            if (table.contains(symbol)) {
                                result = table.getAddress(symbol);
                            } else {
                                table.addEntry(symbol, nextRAMAddress);
                                nextRAMAddress++;
                                result = table.getAddress(symbol);
                            }
                        }
                        out.write(String.format("%016d", decimalToBinary(result)));
                        out.write("\n");
                        break;
                    case C_COMMAND:
                        out.write("111" + code.comp(parser.comp()) + code.dest(parser.dest()) + code.jump(parser.jump()));
                        out.write("\n");
                        break;
                    case L_COMMAND:
                    case COMMENT:
                    default:
                        break;
                }
             }
            out.close();
        } catch (IOException ex) {
            out = null;
            System.err.println("Error: " + ex.getMessage());
        }
    }
}
